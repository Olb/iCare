/*This file is generated by perlxml.pl. DO NOT MODIFY */

#import "ImmuneIDViewController.h"
#import "BBUtil.h"
#import "FormSection.h"
#import "FormElement.h"
#import "BBCheckBox.h"
#import "BooleanFormElement.h"
#import "StringListElement.h"
#import "TextElement.h"
#import "StringArrayTableAdapter.h"

#import "ElementListFormElement.h"

#import "FormElementTableAdapter.h"

#import "FormElementTableCellFactory.h"

#import "AntibioticFormElement.h"

#import "MedicationFormElement.h"

#import "BBData.h"

#import "BBAutoCompleteTextField.h"


@interface ImmuneIDViewController () <UITextFieldDelegate>
@property (weak, nonatomic) IBOutlet BBCheckBox *immuneIDBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *immuneIDNegativeBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *rheumArtBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *hIVBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *autoImmuneDiseaseBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *ongoingInfectionBBCheckBox;
@property (weak, nonatomic) IBOutlet UITextView *notesUITextView;
@end

@implementation ImmuneIDViewController
NSString *const IMMUNEID_SECTION_TITLE = @"ImmuneIDSectionKey";
static NSString *const IMMUNEID_KEY = @"ImmuneIDKey";
static NSString *const IMMUNEIDNegative_KEY = @"ImmuneIDNegativeKey";
static NSString *const RHEUM_ART_KEY = @"RheumArtKey";
static NSString *const HIV_KEY = @"HIVKey";
static NSString *const AUTO_IMMUNE_DISEASE_KEY = @"AutoImmuneDiseaseKey";
static NSString *const ONGOING_INFECTION_KEY = @"OngoingInfectionKey";
static NSString *const NOTES_KEY = @"NotesKey";

- (void)viewDidLoad
{
	 [super viewDidLoad];
	 [self.immuneIDBBCheckBox addTarget:self action:@selector(radioGroup1:) forControlEvents:UIControlEventTouchUpInside];
	 [self.immuneIDNegativeBBCheckBox addTarget:self action:@selector(radioGroup1:) forControlEvents:UIControlEventTouchUpInside];
	 if (_section) {
		 [self validateSection:_section];
		 NSArray *elements = [_section.elements array];

		 for (FormElement *element in elements) {
			 if ([element.key isEqualToString:IMMUNEID_KEY]){
				 [self.immuneIDBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:IMMUNEIDNegative_KEY]){
				 [self.immuneIDNegativeBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:RHEUM_ART_KEY]){
				 [self.rheumArtBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:HIV_KEY]){
				 [self.hIVBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:AUTO_IMMUNE_DISEASE_KEY]){
				 [self.autoImmuneDiseaseBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:ONGOING_INFECTION_KEY]){
				 [self.ongoingInfectionBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:NOTES_KEY]){
				 [self.notesUITextView setText:((TextElement*)element).value];
			 }
		 }
	 }
}


-(void)addDatePicker: (UITextField*)textField withSelector: (SEL)selector {
	 UIDatePicker *datePicker = [[UIDatePicker alloc] init];
	 datePicker.datePickerMode = UIDatePickerModeDate;
	 [textField setInputView:datePicker];
	 UIToolbar *myToolbar = [[UIToolbar alloc] initWithFrame: CGRectMake(0,0,340,44)];
	 UIBarButtonItem *doneButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone target:self action:selector];
	 [myToolbar setItems:[NSArray arrayWithObject: doneButton] animated:NO];
	 textField.inputAccessoryView = myToolbar;
}

-(void)validateSection:(FormSection*)section
{
	 NSAssert([section getElementForKey:IMMUNEID_KEY]!= nil, @"ImmuneID is nil");
	 NSAssert([section getElementForKey:IMMUNEIDNegative_KEY]!= nil, @"ImmuneIDNegative is nil");
	 NSAssert([section getElementForKey:RHEUM_ART_KEY]!= nil, @"RheumArt is nil");
	 NSAssert([section getElementForKey:HIV_KEY]!= nil, @"HIV is nil");
	 NSAssert([section getElementForKey:AUTO_IMMUNE_DISEASE_KEY]!= nil, @"AutoImmuneDisease is nil");
	 NSAssert([section getElementForKey:ONGOING_INFECTION_KEY]!= nil, @"OngoingInfection is nil");
	 NSAssert([section getElementForKey:NOTES_KEY]!= nil, @"Notes is nil");
	 
}

-(BOOL)validateData:(NSString**)errMsg
{
	 if( self.immuneIDNegativeBBCheckBox.selected ){ 
		 if( !((!self.rheumArtBBCheckBox.selected) && (!self.hIVBBCheckBox.selected) && (!self.autoImmuneDiseaseBBCheckBox.selected) && (!self.ongoingInfectionBBCheckBox.selected)) ){ 
			 *errMsg = @"RheumArt must be unselected and HIV must be unselected and AutoImmuneDisease must be unselected and OngoingInfection must be unselected when ImmuneIDNegative is selected"; 
			 return false; 
		 }
	 }
	 if( self.immuneIDBBCheckBox.selected ){ 
		 if( !(self.rheumArtBBCheckBox.selected || self.hIVBBCheckBox.selected || self.autoImmuneDiseaseBBCheckBox.selected || self.ongoingInfectionBBCheckBox.selected) ){ 
			 *errMsg = @"RheumArt must be selected or HIV must be selected or AutoImmuneDisease must be selected or OngoingInfection must be selected when ImmuneID is selected"; 
			 return false; 
		 }
	 }
	 return true; 
}

- (IBAction)accept:(id)sender {
	 NSString* errMsg;
	 if ( ! [self validateData: &errMsg] ){
		 [BBUtil showAlertWithMessage:errMsg];
		 return;
	 }
	 if ( !self.section ){
		 self.section = (FormSection*)[BBUtil newCoreDataObjectForEntityName:@"FormSection"];
		 self.section.title = IMMUNEID_SECTION_TITLE;
	 }
	 
	 BooleanFormElement *immuneID = (BooleanFormElement*)[_section getElementForKey:IMMUNEID_KEY];
	 if (!immuneID) {
		 immuneID = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 immuneID.key = IMMUNEID_KEY;
		 [_section addElementsObject:immuneID];
	 }

	 immuneID.value = [NSNumber numberWithBool:self.immuneIDBBCheckBox.isSelected];
	 
	 BooleanFormElement *immuneIDNegative = (BooleanFormElement*)[_section getElementForKey:IMMUNEIDNegative_KEY];
	 if (!immuneIDNegative) {
		 immuneIDNegative = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 immuneIDNegative.key = IMMUNEIDNegative_KEY;
		 [_section addElementsObject:immuneIDNegative];
	 }

	 immuneIDNegative.value = [NSNumber numberWithBool:self.immuneIDNegativeBBCheckBox.isSelected];
	 
	 BooleanFormElement *rheumArt = (BooleanFormElement*)[_section getElementForKey:RHEUM_ART_KEY];
	 if (!rheumArt) {
		 rheumArt = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 rheumArt.key = RHEUM_ART_KEY;
		 [_section addElementsObject:rheumArt];
	 }

	 rheumArt.value = [NSNumber numberWithBool:self.rheumArtBBCheckBox.isSelected];
	 
	 BooleanFormElement *hIV = (BooleanFormElement*)[_section getElementForKey:HIV_KEY];
	 if (!hIV) {
		 hIV = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 hIV.key = HIV_KEY;
		 [_section addElementsObject:hIV];
	 }

	 hIV.value = [NSNumber numberWithBool:self.hIVBBCheckBox.isSelected];
	 
	 BooleanFormElement *autoImmuneDisease = (BooleanFormElement*)[_section getElementForKey:AUTO_IMMUNE_DISEASE_KEY];
	 if (!autoImmuneDisease) {
		 autoImmuneDisease = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 autoImmuneDisease.key = AUTO_IMMUNE_DISEASE_KEY;
		 [_section addElementsObject:autoImmuneDisease];
	 }

	 autoImmuneDisease.value = [NSNumber numberWithBool:self.autoImmuneDiseaseBBCheckBox.isSelected];
	 
	 BooleanFormElement *ongoingInfection = (BooleanFormElement*)[_section getElementForKey:ONGOING_INFECTION_KEY];
	 if (!ongoingInfection) {
		 ongoingInfection = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 ongoingInfection.key = ONGOING_INFECTION_KEY;
		 [_section addElementsObject:ongoingInfection];
	 }

	 ongoingInfection.value = [NSNumber numberWithBool:self.ongoingInfectionBBCheckBox.isSelected];
	 
	 TextElement *notes = (TextElement*)[_section getElementForKey:NOTES_KEY];
	 if (!notes) {
		 notes = (TextElement*)[BBUtil newCoreDataObjectForEntityName:@"TextElement"];
		 notes.key = NOTES_KEY;
		 [_section addElementsObject:notes];
	 }

	 notes.value = self.notesUITextView.text;
	 
	 [self.delegate sectionCreated:self.section];
	 [self dismissViewControllerAnimated:YES completion:nil];
}

- (IBAction)changeMedUnit:(UIButton*)sender {
	 if ([sender.titleLabel.text isEqualToString: @"cc"]) { 
		 [sender setTitle:@"mcg" forState:UIControlStateNormal];
	 } else if ([sender.titleLabel.text isEqualToString: @"mcg"]) {
		 [sender setTitle:@"mg" forState:UIControlStateNormal];
	 } else if ([sender.titleLabel.text isEqualToString: @"mg"]) {
		 [sender setTitle:@"G" forState:UIControlStateNormal];
	 } else if ([sender.titleLabel.text isEqualToString: @"G"]) {
		 [sender setTitle:@"none" forState:UIControlStateNormal];
	 } else if ([sender.titleLabel.text isEqualToString: @"none"]) {
		 [sender setTitle:@"cc" forState:UIControlStateNormal];
	 } 
}

- (BOOL)disablesAutomaticKeyboardDismissal {
	 return NO;
}

- (IBAction)dismiss:(id)sender {
	 [BBUtil refreshManagedObject:_section];
	 [self dismissViewControllerAnimated:YES completion:nil];
}

+(NSString*)sectionTitle
{
	 return IMMUNEID_SECTION_TITLE;
}
-(void)radioGroup1:(BBCheckBox*)sender {
	 BOOL selected = sender.selected;
	 self.immuneIDBBCheckBox.selected = NO;
	 self.immuneIDNegativeBBCheckBox.selected = NO;
	 sender.selected = selected;
}
@end