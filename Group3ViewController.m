/*This file is generated by perlxml.pl. DO NOT MODIFY */

#import "Group3ViewController.h"
#import "BBUtil.h"
#import "FormSection.h"
#import "FormElement.h"
#import "BBCheckBox.h"
#import "BooleanFormElement.h"
#import "StringListElement.h"
#import "TextElement.h"
#import "StringArrayTableAdapter.h"

#import "ElementListFormElement.h"

#import "FormElementTableAdapter.h"

#import "FormElementTableCellFactory.h"

#import "AntibioticFormElement.h"

#import "MedicationFormElement.h"

#import "BBData.h"

#import "BBAutoCompleteTextField.h"


@interface Group3ViewController () <UITextFieldDelegate>
@property (weak, nonatomic) IBOutlet BBCheckBox *failedRegionalAnesthesiaBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *complicationRegionalAnesthesiaBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *unintendedDuralPunctureBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *obBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *hemotomaBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *infectionBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *highSpinalBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *nonObBBCheckBox;
@end

@implementation Group3ViewController
NSString *const GROUP3_SECTION_TITLE = @"Group3SectionKey";
static NSString *const FAILED_REGIONAL_ANESTHESIA_KEY = @"FailedRegionalAnesthesiaKey";
static NSString *const COMPLICATION_REGIONAL_ANESTHESIA_KEY = @"ComplicationRegionalAnesthesiaKey";
static NSString *const UNINTENDED_DURAL_PUNCTURE_KEY = @"UnintendedDuralPunctureKey";
static NSString *const OB_KEY = @"ObKey";
static NSString *const HEMOTOMA_KEY = @"HemotomaKey";
static NSString *const INFECTION_KEY = @"InfectionKey";
static NSString *const HIGH_SPINAL_KEY = @"HighSpinalKey";
static NSString *const NON_OB_KEY = @"NonObKey";

- (void)viewDidLoad
{
	 [super viewDidLoad];
	 if (_section) {
		 [self validateSection:_section];
		 NSArray *elements = [_section.elements array];

		 for (FormElement *element in elements) {
			 if ([element.key isEqualToString:FAILED_REGIONAL_ANESTHESIA_KEY]){
				 [self.failedRegionalAnesthesiaBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:COMPLICATION_REGIONAL_ANESTHESIA_KEY]){
				 [self.complicationRegionalAnesthesiaBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:UNINTENDED_DURAL_PUNCTURE_KEY]){
				 [self.unintendedDuralPunctureBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:OB_KEY]){
				 [self.obBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:HEMOTOMA_KEY]){
				 [self.hemotomaBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:INFECTION_KEY]){
				 [self.infectionBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:HIGH_SPINAL_KEY]){
				 [self.highSpinalBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:NON_OB_KEY]){
				 [self.nonObBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
		 }
	 }
}


-(void)addDatePicker: (UITextField*)textField withSelector: (SEL)selector {
	 UIDatePicker *datePicker = [[UIDatePicker alloc] init];
	 datePicker.datePickerMode = UIDatePickerModeDate;
	 [textField setInputView:datePicker];
	 UIToolbar *myToolbar = [[UIToolbar alloc] initWithFrame: CGRectMake(0,0,340,44)];
	 UIBarButtonItem *doneButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone target:self action:selector];
	 [myToolbar setItems:[NSArray arrayWithObject: doneButton] animated:NO];
	 textField.inputAccessoryView = myToolbar;
}

-(void)validateSection:(FormSection*)section
{
	 NSAssert([section getElementForKey:FAILED_REGIONAL_ANESTHESIA_KEY]!= nil, @"FailedRegionalAnesthesia is nil");
	 NSAssert([section getElementForKey:COMPLICATION_REGIONAL_ANESTHESIA_KEY]!= nil, @"ComplicationRegionalAnesthesia is nil");
	 NSAssert([section getElementForKey:UNINTENDED_DURAL_PUNCTURE_KEY]!= nil, @"UnintendedDuralPuncture is nil");
	 NSAssert([section getElementForKey:OB_KEY]!= nil, @"Ob is nil");
	 NSAssert([section getElementForKey:HEMOTOMA_KEY]!= nil, @"Hemotoma is nil");
	 NSAssert([section getElementForKey:INFECTION_KEY]!= nil, @"Infection is nil");
	 NSAssert([section getElementForKey:HIGH_SPINAL_KEY]!= nil, @"HighSpinal is nil");
	 NSAssert([section getElementForKey:NON_OB_KEY]!= nil, @"NonOb is nil");
	 
}

-(BOOL)validateData:(NSString**)errMsg
{
	 return true; 
}

- (IBAction)accept:(id)sender {
	 NSString* errMsg;
	 if ( ! [self validateData: &errMsg] ){
		 [BBUtil showAlertWithMessage:errMsg];
		 return;
	 }
	 if ( !self.section ){
		 self.section = (FormSection*)[BBUtil newCoreDataObjectForEntityName:@"FormSection"];
		 self.section.title = GROUP3_SECTION_TITLE;
	 }
	 
	 BooleanFormElement *failedRegionalAnesthesia = (BooleanFormElement*)[_section getElementForKey:FAILED_REGIONAL_ANESTHESIA_KEY];
	 if (!failedRegionalAnesthesia) {
		 failedRegionalAnesthesia = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 failedRegionalAnesthesia.key = FAILED_REGIONAL_ANESTHESIA_KEY;
		 [_section addElementsObject:failedRegionalAnesthesia];
	 }

	 failedRegionalAnesthesia.value = [NSNumber numberWithBool:self.failedRegionalAnesthesiaBBCheckBox.isSelected];
	 
	 BooleanFormElement *complicationRegionalAnesthesia = (BooleanFormElement*)[_section getElementForKey:COMPLICATION_REGIONAL_ANESTHESIA_KEY];
	 if (!complicationRegionalAnesthesia) {
		 complicationRegionalAnesthesia = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 complicationRegionalAnesthesia.key = COMPLICATION_REGIONAL_ANESTHESIA_KEY;
		 [_section addElementsObject:complicationRegionalAnesthesia];
	 }

	 complicationRegionalAnesthesia.value = [NSNumber numberWithBool:self.complicationRegionalAnesthesiaBBCheckBox.isSelected];
	 
	 BooleanFormElement *unintendedDuralPuncture = (BooleanFormElement*)[_section getElementForKey:UNINTENDED_DURAL_PUNCTURE_KEY];
	 if (!unintendedDuralPuncture) {
		 unintendedDuralPuncture = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 unintendedDuralPuncture.key = UNINTENDED_DURAL_PUNCTURE_KEY;
		 [_section addElementsObject:unintendedDuralPuncture];
	 }

	 unintendedDuralPuncture.value = [NSNumber numberWithBool:self.unintendedDuralPunctureBBCheckBox.isSelected];
	 
	 BooleanFormElement *ob = (BooleanFormElement*)[_section getElementForKey:OB_KEY];
	 if (!ob) {
		 ob = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 ob.key = OB_KEY;
		 [_section addElementsObject:ob];
	 }

	 ob.value = [NSNumber numberWithBool:self.obBBCheckBox.isSelected];
	 
	 BooleanFormElement *hemotoma = (BooleanFormElement*)[_section getElementForKey:HEMOTOMA_KEY];
	 if (!hemotoma) {
		 hemotoma = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 hemotoma.key = HEMOTOMA_KEY;
		 [_section addElementsObject:hemotoma];
	 }

	 hemotoma.value = [NSNumber numberWithBool:self.hemotomaBBCheckBox.isSelected];
	 
	 BooleanFormElement *infection = (BooleanFormElement*)[_section getElementForKey:INFECTION_KEY];
	 if (!infection) {
		 infection = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 infection.key = INFECTION_KEY;
		 [_section addElementsObject:infection];
	 }

	 infection.value = [NSNumber numberWithBool:self.infectionBBCheckBox.isSelected];
	 
	 BooleanFormElement *highSpinal = (BooleanFormElement*)[_section getElementForKey:HIGH_SPINAL_KEY];
	 if (!highSpinal) {
		 highSpinal = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 highSpinal.key = HIGH_SPINAL_KEY;
		 [_section addElementsObject:highSpinal];
	 }

	 highSpinal.value = [NSNumber numberWithBool:self.highSpinalBBCheckBox.isSelected];
	 
	 BooleanFormElement *nonOb = (BooleanFormElement*)[_section getElementForKey:NON_OB_KEY];
	 if (!nonOb) {
		 nonOb = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 nonOb.key = NON_OB_KEY;
		 [_section addElementsObject:nonOb];
	 }

	 nonOb.value = [NSNumber numberWithBool:self.nonObBBCheckBox.isSelected];
	 
	 [self.delegate sectionCreated:self.section];
	 [self dismissViewControllerAnimated:YES completion:nil];
}

- (IBAction)changeMedUnit:(UIButton*)sender {
	 if ([sender.titleLabel.text isEqualToString: @"cc"]) { 
		 [sender setTitle:@"mcg" forState:UIControlStateNormal];
	 } else if ([sender.titleLabel.text isEqualToString: @"mcg"]) {
		 [sender setTitle:@"mg" forState:UIControlStateNormal];
	 } else if ([sender.titleLabel.text isEqualToString: @"mg"]) {
		 [sender setTitle:@"G" forState:UIControlStateNormal];
	 } else if ([sender.titleLabel.text isEqualToString: @"G"]) {
		 [sender setTitle:@"none" forState:UIControlStateNormal];
	 } else if ([sender.titleLabel.text isEqualToString: @"none"]) {
		 [sender setTitle:@"cc" forState:UIControlStateNormal];
	 } 
}

- (BOOL)disablesAutomaticKeyboardDismissal {
	 return NO;
}

- (IBAction)dismiss:(id)sender {
	 [BBUtil refreshManagedObject:_section];
	 [self dismissViewControllerAnimated:YES completion:nil];
}

+(NSString*)sectionTitle
{
	 return GROUP3_SECTION_TITLE;
}
-(void)radioGroup1:(BBCheckBox*)sender {
	 BOOL selected = sender.selected;
	 sender.selected = selected;
}
@end