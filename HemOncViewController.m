/*This file is generated by perlxml.pl. DO NOT MODIFY */

#import "HemOncViewController.h"
#import "BBUtil.h"
#import "FormSection.h"
#import "FormElement.h"
#import "BBCheckBox.h"
#import "BooleanFormElement.h"
#import "StringListElement.h"
#import "TextElement.h"
#import "StringArrayTableAdapter.h"

#import "ElementListFormElement.h"

#import "FormElementTableAdapter.h"

#import "FormElementTableCellFactory.h"

#import "AntibioticFormElement.h"

#import "MedicationFormElement.h"

#import "BBData.h"

#import "BBAutoCompleteTextField.h"


@interface HemOncViewController () <UITextFieldDelegate>
@property (weak, nonatomic) IBOutlet BBCheckBox *hemOncBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *hemOncNegativeBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *anemiaBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *dVTBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *bloodRefusalBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *coagulopathyBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *cancerBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *chemoBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *radiationBBCheckBox;
@property (weak, nonatomic) IBOutlet UITextView *notesUITextView;
@end

@implementation HemOncViewController
NSString *const HEM_ONC_SECTION_TITLE = @"HemOncSectionKey";
static NSString *const HEM_ONC_KEY = @"HemOncKey";
static NSString *const HEM_ONC_NEGATIVE_KEY = @"HemOncNegativeKey";
static NSString *const ANEMIA_KEY = @"AnemiaKey";
static NSString *const DVT_KEY = @"DVTKey";
static NSString *const BLOOD_REFUSAL_KEY = @"BloodRefusalKey";
static NSString *const COAGULOPATHY_KEY = @"CoagulopathyKey";
static NSString *const CANCER_KEY = @"CancerKey";
static NSString *const CHEMO_KEY = @"ChemoKey";
static NSString *const RADIATION_KEY = @"RadiationKey";
static NSString *const NOTES_KEY = @"NotesKey";

- (void)viewDidLoad
{
	 [super viewDidLoad];
	 [self.hemOncBBCheckBox addTarget:self action:@selector(radioGroup1:) forControlEvents:UIControlEventTouchUpInside];
	 [self.hemOncNegativeBBCheckBox addTarget:self action:@selector(radioGroup1:) forControlEvents:UIControlEventTouchUpInside];
	 if (_section) {
		 [self validateSection:_section];
		 NSArray *elements = [_section.elements array];

		 for (FormElement *element in elements) {
			 if ([element.key isEqualToString:HEM_ONC_KEY]){
				 [self.hemOncBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:HEM_ONC_NEGATIVE_KEY]){
				 [self.hemOncNegativeBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:ANEMIA_KEY]){
				 [self.anemiaBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:DVT_KEY]){
				 [self.dVTBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:BLOOD_REFUSAL_KEY]){
				 [self.bloodRefusalBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:COAGULOPATHY_KEY]){
				 [self.coagulopathyBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:CANCER_KEY]){
				 [self.cancerBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:CHEMO_KEY]){
				 [self.chemoBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:RADIATION_KEY]){
				 [self.radiationBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:NOTES_KEY]){
				 [self.notesUITextView setText:((TextElement*)element).value];
			 }
		 }
	 }
}


-(void)addDatePicker: (UITextField*)textField withSelector: (SEL)selector {
	 UIDatePicker *datePicker = [[UIDatePicker alloc] init];
	 datePicker.datePickerMode = UIDatePickerModeDate;
	 [textField setInputView:datePicker];
	 UIToolbar *myToolbar = [[UIToolbar alloc] initWithFrame: CGRectMake(0,0,340,44)];
	 UIBarButtonItem *doneButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone target:self action:selector];
	 [myToolbar setItems:[NSArray arrayWithObject: doneButton] animated:NO];
	 textField.inputAccessoryView = myToolbar;
}

-(void)validateSection:(FormSection*)section
{
	 NSAssert([section getElementForKey:HEM_ONC_KEY]!= nil, @"HemOnc is nil");
	 NSAssert([section getElementForKey:HEM_ONC_NEGATIVE_KEY]!= nil, @"HemOncNegative is nil");
	 NSAssert([section getElementForKey:ANEMIA_KEY]!= nil, @"Anemia is nil");
	 NSAssert([section getElementForKey:DVT_KEY]!= nil, @"DVT is nil");
	 NSAssert([section getElementForKey:BLOOD_REFUSAL_KEY]!= nil, @"BloodRefusal is nil");
	 NSAssert([section getElementForKey:COAGULOPATHY_KEY]!= nil, @"Coagulopathy is nil");
	 NSAssert([section getElementForKey:CANCER_KEY]!= nil, @"Cancer is nil");
	 NSAssert([section getElementForKey:CHEMO_KEY]!= nil, @"Chemo is nil");
	 NSAssert([section getElementForKey:RADIATION_KEY]!= nil, @"Radiation is nil");
	 NSAssert([section getElementForKey:NOTES_KEY]!= nil, @"Notes is nil");
	 
}

-(BOOL)validateData:(NSString**)errMsg
{
	 if( self.hemOncNegativeBBCheckBox.selected ){ 
		 if( !((!self.anemiaBBCheckBox.selected) && (!self.dVTBBCheckBox.selected) && (!self.bloodRefusalBBCheckBox.selected) && (!self.coagulopathyBBCheckBox.selected) && (!self.cancerBBCheckBox.selected) && (!self.chemoBBCheckBox.selected) && (!self.radiationBBCheckBox.selected)) ){ 
			 *errMsg = @"Anemia must be unselected and DVT must be unselected and BloodRefusal must be unselected and Coagulopathy must be unselected and Cancer must be unselected and Chemo must be unselected and Radiation must be unselected when HemOncNegative is selected"; 
			 return false; 
		 }
	 }
	 if( self.hemOncBBCheckBox.selected ){ 
		 if( !(self.anemiaBBCheckBox.selected || self.dVTBBCheckBox.selected || self.bloodRefusalBBCheckBox.selected || self.coagulopathyBBCheckBox.selected || self.cancerBBCheckBox.selected || self.chemoBBCheckBox.selected || self.radiationBBCheckBox.selected) ){ 
			 *errMsg = @"Anemia must be selected or DVT must be selected or BloodRefusal must be selected or Coagulopathy must be selected or Cancer must be selected or Chemo must be selected or Radiation must be selected when HemOnc is selected"; 
			 return false; 
		 }
	 }
	 return true; 
}

- (IBAction)accept:(id)sender {
	 NSString* errMsg;
	 if ( ! [self validateData: &errMsg] ){
		 [BBUtil showAlertWithMessage:errMsg];
		 return;
	 }
	 if ( !self.section ){
		 self.section = (FormSection*)[BBUtil newCoreDataObjectForEntityName:@"FormSection"];
		 self.section.title = HEM_ONC_SECTION_TITLE;
	 }
	 
	 BooleanFormElement *hemOnc = (BooleanFormElement*)[_section getElementForKey:HEM_ONC_KEY];
	 if (!hemOnc) {
		 hemOnc = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 hemOnc.key = HEM_ONC_KEY;
		 [_section addElementsObject:hemOnc];
	 }

	 hemOnc.value = [NSNumber numberWithBool:self.hemOncBBCheckBox.isSelected];
	 
	 BooleanFormElement *hemOncNegative = (BooleanFormElement*)[_section getElementForKey:HEM_ONC_NEGATIVE_KEY];
	 if (!hemOncNegative) {
		 hemOncNegative = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 hemOncNegative.key = HEM_ONC_NEGATIVE_KEY;
		 [_section addElementsObject:hemOncNegative];
	 }

	 hemOncNegative.value = [NSNumber numberWithBool:self.hemOncNegativeBBCheckBox.isSelected];
	 
	 BooleanFormElement *anemia = (BooleanFormElement*)[_section getElementForKey:ANEMIA_KEY];
	 if (!anemia) {
		 anemia = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 anemia.key = ANEMIA_KEY;
		 [_section addElementsObject:anemia];
	 }

	 anemia.value = [NSNumber numberWithBool:self.anemiaBBCheckBox.isSelected];
	 
	 BooleanFormElement *dVT = (BooleanFormElement*)[_section getElementForKey:DVT_KEY];
	 if (!dVT) {
		 dVT = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 dVT.key = DVT_KEY;
		 [_section addElementsObject:dVT];
	 }

	 dVT.value = [NSNumber numberWithBool:self.dVTBBCheckBox.isSelected];
	 
	 BooleanFormElement *bloodRefusal = (BooleanFormElement*)[_section getElementForKey:BLOOD_REFUSAL_KEY];
	 if (!bloodRefusal) {
		 bloodRefusal = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 bloodRefusal.key = BLOOD_REFUSAL_KEY;
		 [_section addElementsObject:bloodRefusal];
	 }

	 bloodRefusal.value = [NSNumber numberWithBool:self.bloodRefusalBBCheckBox.isSelected];
	 
	 BooleanFormElement *coagulopathy = (BooleanFormElement*)[_section getElementForKey:COAGULOPATHY_KEY];
	 if (!coagulopathy) {
		 coagulopathy = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 coagulopathy.key = COAGULOPATHY_KEY;
		 [_section addElementsObject:coagulopathy];
	 }

	 coagulopathy.value = [NSNumber numberWithBool:self.coagulopathyBBCheckBox.isSelected];
	 
	 BooleanFormElement *cancer = (BooleanFormElement*)[_section getElementForKey:CANCER_KEY];
	 if (!cancer) {
		 cancer = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 cancer.key = CANCER_KEY;
		 [_section addElementsObject:cancer];
	 }

	 cancer.value = [NSNumber numberWithBool:self.cancerBBCheckBox.isSelected];
	 
	 BooleanFormElement *chemo = (BooleanFormElement*)[_section getElementForKey:CHEMO_KEY];
	 if (!chemo) {
		 chemo = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 chemo.key = CHEMO_KEY;
		 [_section addElementsObject:chemo];
	 }

	 chemo.value = [NSNumber numberWithBool:self.chemoBBCheckBox.isSelected];
	 
	 BooleanFormElement *radiation = (BooleanFormElement*)[_section getElementForKey:RADIATION_KEY];
	 if (!radiation) {
		 radiation = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 radiation.key = RADIATION_KEY;
		 [_section addElementsObject:radiation];
	 }

	 radiation.value = [NSNumber numberWithBool:self.radiationBBCheckBox.isSelected];
	 
	 TextElement *notes = (TextElement*)[_section getElementForKey:NOTES_KEY];
	 if (!notes) {
		 notes = (TextElement*)[BBUtil newCoreDataObjectForEntityName:@"TextElement"];
		 notes.key = NOTES_KEY;
		 [_section addElementsObject:notes];
	 }

	 notes.value = self.notesUITextView.text;
	 
	 [self.delegate sectionCreated:self.section];
	 [self dismissViewControllerAnimated:YES completion:nil];
}

- (IBAction)changeMedUnit:(UIButton*)sender {
	 if ([sender.titleLabel.text isEqualToString: @"cc"]) { 
		 [sender setTitle:@"mcg" forState:UIControlStateNormal];
	 } else if ([sender.titleLabel.text isEqualToString: @"mcg"]) {
		 [sender setTitle:@"mg" forState:UIControlStateNormal];
	 } else if ([sender.titleLabel.text isEqualToString: @"mg"]) {
		 [sender setTitle:@"G" forState:UIControlStateNormal];
	 } else if ([sender.titleLabel.text isEqualToString: @"G"]) {
		 [sender setTitle:@"none" forState:UIControlStateNormal];
	 } else if ([sender.titleLabel.text isEqualToString: @"none"]) {
		 [sender setTitle:@"cc" forState:UIControlStateNormal];
	 } 
}

- (BOOL)disablesAutomaticKeyboardDismissal {
	 return NO;
}

- (IBAction)dismiss:(id)sender {
	 [BBUtil refreshManagedObject:_section];
	 [self dismissViewControllerAnimated:YES completion:nil];
}

+(NSString*)sectionTitle
{
	 return HEM_ONC_SECTION_TITLE;
}
-(void)radioGroup1:(BBCheckBox*)sender {
	 BOOL selected = sender.selected;
	 self.hemOncBBCheckBox.selected = NO;
	 self.hemOncNegativeBBCheckBox.selected = NO;
	 sender.selected = selected;
}
@end