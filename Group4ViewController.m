/*This file is generated by perlxml.pl. DO NOT MODIFY */

#import "Group4ViewController.h"
#import "BBUtil.h"
#import "FormSection.h"
#import "FormElement.h"
#import "BBCheckBox.h"
#import "BooleanFormElement.h"
#import "StringListElement.h"
#import "TextElement.h"
#import "StringArrayTableAdapter.h"

#import "ElementListFormElement.h"

#import "FormElementTableAdapter.h"

#import "FormElementTableCellFactory.h"

#import "AntibioticFormElement.h"

#import "MedicationFormElement.h"


@interface Group4ViewController () <UITextFieldDelegate>
@property (weak, nonatomic) IBOutlet BBCheckBox *drugReactionBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *transfusionReactionBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *localAnestheticToxicityBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *medicationErrorBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *incorrectMedicationBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *incorectDoseBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *vascularAccessComplicationBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *acuteOnsetRenalFailiureBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *malignantHyperthermiaBBCheckBox;
@property (weak, nonatomic) IBOutlet BBCheckBox *thermalBurnBBCheckBox;
@end

@implementation Group4ViewController
NSString *const GROUP4_SECTION_TITLE = @"Group4SectionKey";
static NSString *const DRUG_REACTION_KEY = @"DrugReactionKey";
static NSString *const TRANSFUSION_REACTION_KEY = @"TransfusionReactionKey";
static NSString *const LOCAL_ANESTHETIC_TOXICITY_KEY = @"LocalAnestheticToxicityKey";
static NSString *const MEDICATION_ERROR_KEY = @"MedicationErrorKey";
static NSString *const INCORRECT_MEDICATION_KEY = @"IncorrectMedicationKey";
static NSString *const INCORECT_DOSE_KEY = @"IncorectDoseKey";
static NSString *const VASCULAR_ACCESS_COMPLICATION_KEY = @"VascularAccessComplicationKey";
static NSString *const ACUTE_ONSET_RENAL_FAILIURE_KEY = @"AcuteOnsetRenalFailiureKey";
static NSString *const MALIGNANT_HYPERTHERMIA_KEY = @"MalignantHyperthermiaKey";
static NSString *const THERMAL_BURN_KEY = @"ThermalBurnKey";

- (void)viewDidLoad
{
	 [super viewDidLoad];
	 if (_section) {
		 [self validateSection:_section];
		 NSArray *elements = [_section.elements array];

		 for (FormElement *element in elements) {
			 if ([element.key isEqualToString:DRUG_REACTION_KEY]){
				 [self.drugReactionBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:TRANSFUSION_REACTION_KEY]){
				 [self.transfusionReactionBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:LOCAL_ANESTHETIC_TOXICITY_KEY]){
				 [self.localAnestheticToxicityBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:MEDICATION_ERROR_KEY]){
				 [self.medicationErrorBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:INCORRECT_MEDICATION_KEY]){
				 [self.incorrectMedicationBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:INCORECT_DOSE_KEY]){
				 [self.incorectDoseBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:VASCULAR_ACCESS_COMPLICATION_KEY]){
				 [self.vascularAccessComplicationBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:ACUTE_ONSET_RENAL_FAILIURE_KEY]){
				 [self.acuteOnsetRenalFailiureBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:MALIGNANT_HYPERTHERMIA_KEY]){
				 [self.malignantHyperthermiaBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
			 if ([element.key isEqualToString:THERMAL_BURN_KEY]){
				 [self.thermalBurnBBCheckBox setSelected:[((BooleanFormElement*)element).value boolValue]];
			 }
		 }
	 }
}

-(void)validateSection:(FormSection*)section
{
	 NSAssert([section getElementForKey:DRUG_REACTION_KEY]!= nil, @"DrugReaction is nil");
	 NSAssert([section getElementForKey:TRANSFUSION_REACTION_KEY]!= nil, @"TransfusionReaction is nil");
	 NSAssert([section getElementForKey:LOCAL_ANESTHETIC_TOXICITY_KEY]!= nil, @"LocalAnestheticToxicity is nil");
	 NSAssert([section getElementForKey:MEDICATION_ERROR_KEY]!= nil, @"MedicationError is nil");
	 NSAssert([section getElementForKey:INCORRECT_MEDICATION_KEY]!= nil, @"IncorrectMedication is nil");
	 NSAssert([section getElementForKey:INCORECT_DOSE_KEY]!= nil, @"IncorectDose is nil");
	 NSAssert([section getElementForKey:VASCULAR_ACCESS_COMPLICATION_KEY]!= nil, @"VascularAccessComplication is nil");
	 NSAssert([section getElementForKey:ACUTE_ONSET_RENAL_FAILIURE_KEY]!= nil, @"AcuteOnsetRenalFailiure is nil");
	 NSAssert([section getElementForKey:MALIGNANT_HYPERTHERMIA_KEY]!= nil, @"MalignantHyperthermia is nil");
	 NSAssert([section getElementForKey:THERMAL_BURN_KEY]!= nil, @"ThermalBurn is nil");
	 
}

-(BOOL)validateData:(NSString**)errMsg
{
	 return true; 
}

- (IBAction)accept:(id)sender {
	 NSString* errMsg;
	 if ( ! [self validateData: &errMsg] ){
		 [BBUtil showAlertWithMessage:errMsg];
		 return;
	 }
	 if ( !self.section ){
		 self.section = (FormSection*)[BBUtil newCoreDataObjectForEntityName:@"FormSection"];
		 self.section.title = GROUP4_SECTION_TITLE;
	 }
	 
	 BooleanFormElement *drugReaction = (BooleanFormElement*)[_section getElementForKey:DRUG_REACTION_KEY];
	 if (!drugReaction) {
		 drugReaction = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 drugReaction.key = DRUG_REACTION_KEY;
		 [_section addElementsObject:drugReaction];
	 }

	 drugReaction.value = [NSNumber numberWithBool:self.drugReactionBBCheckBox.isSelected];
	 
	 BooleanFormElement *transfusionReaction = (BooleanFormElement*)[_section getElementForKey:TRANSFUSION_REACTION_KEY];
	 if (!transfusionReaction) {
		 transfusionReaction = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 transfusionReaction.key = TRANSFUSION_REACTION_KEY;
		 [_section addElementsObject:transfusionReaction];
	 }

	 transfusionReaction.value = [NSNumber numberWithBool:self.transfusionReactionBBCheckBox.isSelected];
	 
	 BooleanFormElement *localAnestheticToxicity = (BooleanFormElement*)[_section getElementForKey:LOCAL_ANESTHETIC_TOXICITY_KEY];
	 if (!localAnestheticToxicity) {
		 localAnestheticToxicity = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 localAnestheticToxicity.key = LOCAL_ANESTHETIC_TOXICITY_KEY;
		 [_section addElementsObject:localAnestheticToxicity];
	 }

	 localAnestheticToxicity.value = [NSNumber numberWithBool:self.localAnestheticToxicityBBCheckBox.isSelected];
	 
	 BooleanFormElement *medicationError = (BooleanFormElement*)[_section getElementForKey:MEDICATION_ERROR_KEY];
	 if (!medicationError) {
		 medicationError = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 medicationError.key = MEDICATION_ERROR_KEY;
		 [_section addElementsObject:medicationError];
	 }

	 medicationError.value = [NSNumber numberWithBool:self.medicationErrorBBCheckBox.isSelected];
	 
	 BooleanFormElement *incorrectMedication = (BooleanFormElement*)[_section getElementForKey:INCORRECT_MEDICATION_KEY];
	 if (!incorrectMedication) {
		 incorrectMedication = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 incorrectMedication.key = INCORRECT_MEDICATION_KEY;
		 [_section addElementsObject:incorrectMedication];
	 }

	 incorrectMedication.value = [NSNumber numberWithBool:self.incorrectMedicationBBCheckBox.isSelected];
	 
	 BooleanFormElement *incorectDose = (BooleanFormElement*)[_section getElementForKey:INCORECT_DOSE_KEY];
	 if (!incorectDose) {
		 incorectDose = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 incorectDose.key = INCORECT_DOSE_KEY;
		 [_section addElementsObject:incorectDose];
	 }

	 incorectDose.value = [NSNumber numberWithBool:self.incorectDoseBBCheckBox.isSelected];
	 
	 BooleanFormElement *vascularAccessComplication = (BooleanFormElement*)[_section getElementForKey:VASCULAR_ACCESS_COMPLICATION_KEY];
	 if (!vascularAccessComplication) {
		 vascularAccessComplication = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 vascularAccessComplication.key = VASCULAR_ACCESS_COMPLICATION_KEY;
		 [_section addElementsObject:vascularAccessComplication];
	 }

	 vascularAccessComplication.value = [NSNumber numberWithBool:self.vascularAccessComplicationBBCheckBox.isSelected];
	 
	 BooleanFormElement *acuteOnsetRenalFailiure = (BooleanFormElement*)[_section getElementForKey:ACUTE_ONSET_RENAL_FAILIURE_KEY];
	 if (!acuteOnsetRenalFailiure) {
		 acuteOnsetRenalFailiure = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 acuteOnsetRenalFailiure.key = ACUTE_ONSET_RENAL_FAILIURE_KEY;
		 [_section addElementsObject:acuteOnsetRenalFailiure];
	 }

	 acuteOnsetRenalFailiure.value = [NSNumber numberWithBool:self.acuteOnsetRenalFailiureBBCheckBox.isSelected];
	 
	 BooleanFormElement *malignantHyperthermia = (BooleanFormElement*)[_section getElementForKey:MALIGNANT_HYPERTHERMIA_KEY];
	 if (!malignantHyperthermia) {
		 malignantHyperthermia = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 malignantHyperthermia.key = MALIGNANT_HYPERTHERMIA_KEY;
		 [_section addElementsObject:malignantHyperthermia];
	 }

	 malignantHyperthermia.value = [NSNumber numberWithBool:self.malignantHyperthermiaBBCheckBox.isSelected];
	 
	 BooleanFormElement *thermalBurn = (BooleanFormElement*)[_section getElementForKey:THERMAL_BURN_KEY];
	 if (!thermalBurn) {
		 thermalBurn = (BooleanFormElement*)[BBUtil newCoreDataObjectForEntityName:@"BooleanFormElement"];
		 thermalBurn.key = THERMAL_BURN_KEY;
		 [_section addElementsObject:thermalBurn];
	 }

	 thermalBurn.value = [NSNumber numberWithBool:self.thermalBurnBBCheckBox.isSelected];
	 
	 [self.delegate sectionCreated:self.section];
	 [self dismissViewControllerAnimated:YES completion:nil];
}

- (BOOL)disablesAutomaticKeyboardDismissal {
	 return NO;
}

- (IBAction)dismiss:(id)sender {
	 [BBUtil refreshManagedObject:_section];
	 [self dismissViewControllerAnimated:YES completion:nil];
}

+(NSString*)sectionTitle
{
	 return GROUP4_SECTION_TITLE;
}
-(void)radioGroup1:(BBCheckBox*)sender {
	 BOOL selected = sender.selected;
	 sender.selected = selected;
}
@end